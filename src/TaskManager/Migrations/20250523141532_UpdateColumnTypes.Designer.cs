// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TaskManager.Models;

#nullable disable

namespace TaskManager.Migrations
{
    [DbContext(typeof(TaskManagerContext))]
    [Migration("20250523141532_UpdateColumnTypes")]
    partial class UpdateColumnTypes
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TaskManager.Models.Attachment", b =>
                {
                    b.Property<int>("AttachmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("attachment_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AttachmentId"));

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("file_path");

                    b.Property<int?>("TaskId")
                        .HasColumnType("integer")
                        .HasColumnName("task_id");

                    b.HasKey("AttachmentId")
                        .HasName("attachments_pkey");

                    b.HasIndex(new[] { "TaskId" }, "idx_attachments_task_id");

                    b.ToTable("attachments", (string)null);
                });

            modelBuilder.Entity("TaskManager.Models.Project", b =>
                {
                    b.Property<int>("ProjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("project_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ProjectId"));

                    b.Property<DateTime?>("DateOfCreate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_of_create")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("full_name");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("short_name");

                    b.HasKey("ProjectId")
                        .HasName("projects_pkey");

                    b.ToTable("projects", (string)null);
                });

            modelBuilder.Entity("TaskManager.Models.Task", b =>
                {
                    b.Property<int>("TaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("task_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TaskId"));

                    b.Property<int?>("AssignmentId")
                        .HasColumnType("integer")
                        .HasColumnName("assignment_id");

                    b.Property<int?>("AuthorId")
                        .HasColumnType("integer")
                        .HasColumnName("author_id");

                    b.Property<DateTime?>("Deadline")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("deadline");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("integer")
                        .HasColumnName("project_id");

                    b.Property<int?>("ReviewerId")
                        .HasColumnType("integer")
                        .HasColumnName("reviewer_id");

                    b.Property<int?>("TesterId")
                        .HasColumnType("integer")
                        .HasColumnName("tester_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("title");

                    b.HasKey("TaskId")
                        .HasName("tasks_pkey");

                    b.HasIndex("AssignmentId");

                    b.HasIndex("AuthorId");

                    b.HasIndex("ReviewerId");

                    b.HasIndex("TesterId");

                    b.HasIndex(new[] { "ProjectId" }, "idx_tasks_project_id");

                    b.ToTable("tasks", (string)null);
                });

            modelBuilder.Entity("TaskManager.Models.TaskStatusLog", b =>
                {
                    b.Property<int>("TaskStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("task_status_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TaskStatusId"));

                    b.Property<string>("Comment")
                        .HasColumnType("text")
                        .HasColumnName("comment");

                    b.Property<DateTime?>("DateUpdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_update")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("status");

                    b.Property<int?>("TaskId")
                        .HasColumnType("integer")
                        .HasColumnName("task_id");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("TaskStatusId")
                        .HasName("taskstatuslog_pkey");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "TaskId" }, "idx_task_status_log_task_id");

                    b.ToTable("taskstatuslog", (string)null);
                });

            modelBuilder.Entity("TaskManager.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("email");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("password");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("role");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("username");

                    b.HasKey("UserId")
                        .HasName("users_pkey");

                    b.HasIndex(new[] { "Email" }, "users_email_key")
                        .IsUnique();

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("TaskManager.Models.UserAccess", b =>
                {
                    b.Property<int>("UserAccessId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("user_access_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserAccessId"));

                    b.Property<int?>("ProjectId")
                        .HasColumnType("integer")
                        .HasColumnName("project_id");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("UserAccessId")
                        .HasName("useraccesses_pkey");

                    b.HasIndex(new[] { "ProjectId" }, "idx_user_accesses_project_id");

                    b.HasIndex(new[] { "UserId" }, "idx_user_accesses_user_id");

                    b.HasIndex(new[] { "UserId", "ProjectId" }, "unique_user_project")
                        .IsUnique();

                    b.ToTable("useraccesses", (string)null);
                });

            modelBuilder.Entity("TaskManager.Models.Attachment", b =>
                {
                    b.HasOne("TaskManager.Models.Task", "Task")
                        .WithMany("Attachments")
                        .HasForeignKey("TaskId")
                        .HasConstraintName("attachments_task_id_fkey");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("TaskManager.Models.Task", b =>
                {
                    b.HasOne("TaskManager.Models.User", "Assignment")
                        .WithMany("TaskAssignments")
                        .HasForeignKey("AssignmentId")
                        .HasConstraintName("tasks_assignment_id_fkey");

                    b.HasOne("TaskManager.Models.User", "Author")
                        .WithMany("TaskAuthors")
                        .HasForeignKey("AuthorId")
                        .HasConstraintName("tasks_author_id_fkey");

                    b.HasOne("TaskManager.Models.Project", "Project")
                        .WithMany("Tasks")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("tasks_project_id_fkey");

                    b.HasOne("TaskManager.Models.User", "Reviewer")
                        .WithMany("TaskReviewers")
                        .HasForeignKey("ReviewerId")
                        .HasConstraintName("tasks_reviewer_id_fkey");

                    b.HasOne("TaskManager.Models.User", "Tester")
                        .WithMany("TaskTesters")
                        .HasForeignKey("TesterId")
                        .HasConstraintName("tasks_tester_id_fkey");

                    b.Navigation("Assignment");

                    b.Navigation("Author");

                    b.Navigation("Project");

                    b.Navigation("Reviewer");

                    b.Navigation("Tester");
                });

            modelBuilder.Entity("TaskManager.Models.TaskStatusLog", b =>
                {
                    b.HasOne("TaskManager.Models.Task", "Task")
                        .WithMany("TaskStatusLogs")
                        .HasForeignKey("TaskId")
                        .HasConstraintName("taskstatuslog_task_id_fkey");

                    b.HasOne("TaskManager.Models.User", "User")
                        .WithMany("TaskStatusLogs")
                        .HasForeignKey("UserId")
                        .HasConstraintName("taskstatuslog_user_id_fkey");

                    b.Navigation("Task");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TaskManager.Models.UserAccess", b =>
                {
                    b.HasOne("TaskManager.Models.Project", "Project")
                        .WithMany("UserAccesses")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("useraccesses_project_id_fkey");

                    b.HasOne("TaskManager.Models.User", "User")
                        .WithMany("UserAccesses")
                        .HasForeignKey("UserId")
                        .HasConstraintName("useraccesses_user_id_fkey");

                    b.Navigation("Project");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TaskManager.Models.Project", b =>
                {
                    b.Navigation("Tasks");

                    b.Navigation("UserAccesses");
                });

            modelBuilder.Entity("TaskManager.Models.Task", b =>
                {
                    b.Navigation("Attachments");

                    b.Navigation("TaskStatusLogs");
                });

            modelBuilder.Entity("TaskManager.Models.User", b =>
                {
                    b.Navigation("TaskAssignments");

                    b.Navigation("TaskAuthors");

                    b.Navigation("TaskReviewers");

                    b.Navigation("TaskStatusLogs");

                    b.Navigation("TaskTesters");

                    b.Navigation("UserAccesses");
                });
#pragma warning restore 612, 618
        }
    }
}
